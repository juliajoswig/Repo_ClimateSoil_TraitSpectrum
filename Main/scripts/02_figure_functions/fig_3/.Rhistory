nruns=50
nruns=50
climOsoil="soilAclimate"
setwd("/Net/Groups")
orig_loctem =  "BGI"#"/Volumes/BGI"
output_term = "log10" # or "non_woody" or  "woody" or ""
version_now="V_2020_02_10"
require("dplyr")
Appr_type_now="Data_GapFilled"
# ---------------------------------------------------------------------------------------
# define the origin path
# ---------------------------------------------------------------------------------------
# origin = # please add your local path here & comment the ones below.
#origin = file.path(orig_loctem,"work_1/2018_Dichotomy/V_2/Revision_2019")
origin = file.path("/Users/jjoswig/Documents/_docs/03_projects/2020/002_Dichotomy/2019_Revision/20191004_Revision/R")
source(file.path(origin,"scripts",version_now ,"_master","fn_functions.R"))
output_term=""
#-------------
# load data
#-------------
load(file.path(origin, "data", "_results","RidgeRegression","hp_RR",paste0("HP_",nruns=nruns,"nruns_","Data_GapFilled", output_term,".RData")))
hp_now <- hp_l[[which(names(hp_l)%in%climOsoil)]]
#-------------
# load data
#-------------
list.files(file.path(origin, "data", "_results","RidgeRegression"))
#-------------
# load data
#-------------
list.files(file.path(origin, "data", "_results","RidgeRegression","soilAclimate"))
#-------------
# load data
#-------------
list.files(file.path(origin, "data", "_results","RidgeRegression","soilAclimate","50Reps"))
list.files(file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr"))
if(output_term==""|output_term=="PCA"|output_term=="log10"){load(file = file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr","TRY_Env2_Kier_20191111.RData"))}
load(file = file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr","TRY_Env2_Kier_20191111.RData"))
# rename
TRY_Env_o <- TRY_Env2_Kier
# process data:
out <- prep_TRY_Env(Appr_type_now,output_term,Rename_Vars,TRY_Env_o)
info=out$info_2
trait=out$trait_2
soil=out$soil_2
climate=out$climate_2
load_analysis_RidgeRegression
source(file.path(origin,"scripts",version_now,"01_analysis_functions","RidgeRegression","fn_easyload_RR.R"))
climOsoil
r2 <- load_analysis_RidgeRegression(origin,nruns,climOsoil,output_term)
#--------------------------------------------------------------------------------------
# load data
#--------------------------------------------------------------------------------------
secondname=paste0(sub(".*A", "", climOsoil))
firstname=paste0(substring(text = climOsoil,first = 1,last = regexpr("A", climOsoil)[1]-1))
#load first
load(file = file.path( origin, "data", "_results","RidgeRegression",firstname, paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))
first_res <- out
rm("out")
#load second
load(file = file.path( origin, "data", "_results","RidgeRegression",secondname, paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))
second_res <- out
rm("out")
#load firstAsecond
if(climOsoil%in%c("soil_physicsAsoil_chemistry","soil_chemistryAsoil_physics",
"climate_waterAclimate_energy","climate_energyAclimate_water")){
if(climOsoil%in%c("soil_physicsAsoil_chemistry","soil_chemistryAsoil_physics")&
file.exists(file.path( origin, "data", "_results","RidgeRegression","soil", paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))){
load(file = file.path( origin, "data", "_results","RidgeRegression","soil", paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))
firstAsecond_res <- out
rm("out")}
if(climOsoil%in%c("climate_waterAclimate_energy","climate_energyAclimate_water")&
file.exists(file.path( origin, "data", "_results","RidgeRegression","climate", paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))){
load(file = file.path( origin, "data", "_results","RidgeRegression","climate", paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))
firstAsecond_res <- out
rm("out")}
}else{
if(file.exists(file.path( origin, "data", "_results","RidgeRegression",paste0(firstname,"A",secondname), paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))){
load(file = file.path( origin, "data", "_results","RidgeRegression",paste0(firstname,"A",secondname), paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))}
if(file.exists(file.path( origin, "data", "_results","RidgeRegression",paste0(secondname,"A",firstname), paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))){
load(file = file.path( origin, "data", "_results","RidgeRegression",paste0(secondname,"A",firstname), paste0(nruns,"Reps"),
paste0("Res_Data_GapFilled",output_term,".RData")))}
firstAsecond_res <- out
rm("out")
}
# SETUP
# Julia Joswig
# 2020_02_17
# ------------
# ---------------------------------------------------------------------------------------
setwd("/Net/Groups")
orig_loctem =  "BGI"#"/Volumes/BGI"
output_term = "log10" # or "non_woody" or  "woody" or ""
version_now="V_2020_02_10"
require("dplyr")
Appr_type_now="Data_GapFilled"
# ---------------------------------------------------------------------------------------
# define the origin path
# ---------------------------------------------------------------------------------------
# origin = # please add your local path here & comment the ones below.
#origin = file.path(orig_loctem,"work_1/2018_Dichotomy/V_2/Revision_2019")
origin = file.path("/Users/jjoswig/Documents/_docs/03_projects/2020/002_Dichotomy/2019_Revision/20191004_Revision/R")
source(file.path(origin,"scripts",version_now ,"_master","fn_functions.R"))
#-----------------------------------------------------------------------------------
# model building analyses
#-----------------------------------------------------------------------------------
doPLS=FALSE
doPCA=FALSE
doRR=TRUE
doRF=FALSE
folds=10
ncomp_PCA=20
# ---------------------------------------------------------------------------------------
# 00 - define the origin path
# ---------------------------------------------------------------------------------------
origin = getwd()
setwd()
origin = "/Users/jjoswig/Documents/_docs/03_projects/2021/002_Dichotomy/_script_data/20210907_Script_data/Main" # please add your local path here
#  origin = "/Users/jjoswig/Documents/_docs/03_projects/2021/002_Dichotomy/_script_data/20210907_Script_data/Main" # please add your local path here
list.files(origin)
# load functions from functions scripts
source(file.path(origin,"scripts" ,"_support_functions","fn_functions.R"))
# Errors: load table_1.R no working
source(file.path(origin,"scripts" ,"_support_functions","fn_packages.R"))# check, this does not exist.
require(likert)
climOsoil="soilAclimate"
output_term=""
nruns=50
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
list.files(file.path(origin, "data", "_results","HierarchicalPartitioning","_RidgeRegression_results"))
doPCA=TRUE
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
list.files(file.path(origin, "data", "_results","HierarchicalPartitioning","_RidgeRegression_results"))
target_order1=c("SeLen","DispULen","SeedMass","PlantHeight","LeFMass","LeArea","ConduitDens",
"SSD","LeC","LeNP","LeP","LeNArea","SLA","LeN", "VesLen","Led15N","SenbU")
load(file.path(origin, "data", "_results","HierarchicalPartitioning","_RidgeRegression_results",
paste0("HP_",nruns,"nruns_",pca_term,".RData")))
hp_now <- hp_l[[which(names(hp_l)%in%climOsoil)]]
title <- ""
# rename & order
ix <- match(target_order1,colnames(hp_now[[1]]))
colnames(hp_now[[1]]) <- Rename_Vars(colnames(hp_now[[1]]))[,3]
colnames(hp_now[[2]]) <- Rename_Vars(colnames(hp_now[[2]]))[,3]
colnames(hp_now[[3]]) <- Rename_Vars(colnames(hp_now[[3]]))[,3]
hp_now[[1]] <- hp_now[[1]][,ix]
hp_now[[2]] <- hp_now[[2]][,ix]
hp_now[[3]] <- hp_now[[3]][,ix]
# data processing
m <- matrix(NA,ncol=4,nrow=ncol(hp_now[[3]]))
m[,1] <- Rename_Vars(colnames(hp_now[[3]]))[,3]
m[,1] <- colnames(hp_now[[3]])#Rename_Vars()[,3]
m[,2] <- colMeans(hp_now[[2]] - hp_now[[4]])*100# pure indep effect
m[,3] <- colMeans(hp_now[[3]])*2*100# joint effect
m[,4] <- colMeans(hp_now[[1]] - hp_now[[3]])*100# pure indep effect
m[m<0]  = 0
colnames(m)<- c("Item","Independent_climate","Joint","Independent_soil")
df <- data.frame(m)
df <- transform(df,Independent_climate=as.numeric(as.vector(Independent_climate)),
Independent_soil=as.numeric(as.vector(Independent_soil)),Joint=as.numeric(as.vector(Joint)))
dfs <- likert(summary = df)#,grouping = put_into_traitGroup(colnames(hp_now$r2_soil)))
str(dfs)
#The items are not present, but the likert object can still be summarised:
summary(dfs)
scale_height = knitr::opts_chunk$get('fig.height')*2.5
scale_width = knitr::opts_chunk$get('fig.width')*.7
knitr::opts_chunk$set(fig.height = scale_height, fig.width = scale_width)
theme_update(legend.text = element_text(size = rel(1)))
try(dev.off())
out <- list()
out$dfs <- dfs
out$target_order <-  Rename_Vars(target_order1)[,3]
out$target_order1 <-  target_order1
require(likert)
par(mfrow=c(1,1),mar=c(8,8,2,2))
try(plot(out$dfs,group.order = out$target_order) +
ggtitle("")+
#          theme(axis.text=element_text(size=12))+#
theme(axis.text.y = element_text(size=17,colour = c(color_to_traits(out$target_order1)[17:1])))+
ylab("% of trait variance explained by climate and/or soil")+
scale_fill_manual(values=c(climate_col, soil_col, "lightgray"),drop=TRUE))
par(mfrow=c(1,1),mar=c(8,8,2,2))
try(plot(out$dfs,group.order = out$target_order) +
ggtitle("")+
#        theme(axis.text.y = element_text(size=17,colour = c(color_to_traits(out$target_order1)[17:1])))+
theme(axis.text.y = element_text(size=15))+
ylab("% of trait variance explained by climate and/or soil")+
scale_fill_manual(values=c(climate_col, soil_col, "lightgray"),drop=TRUE))
pdf(file=file.path(origin,"figures","figure_3",paste0("figure_3b_R",".pdf")))
par(mfrow=c(1,1),mar=c(8,8,2,2))
try(plot(out$dfs,group.order = out$target_order) +
ggtitle("")+
#        theme(axis.text.y = element_text(size=17,colour = c(color_to_traits(out$target_order1)[17:1])))+
theme(axis.text.y = element_text(size=15))+
ylab("% of trait variance explained by climate and/or soil")+
scale_fill_manual(values=c(climate_col, soil_col, "lightgray"),drop=TRUE))
dev.off()
