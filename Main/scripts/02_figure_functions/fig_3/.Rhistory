setwd("/Net/Groups")
orig_loctem ="/Volumes/BGI" # local
orig_loctem =  "BGI"#"/Volumes/BGI"
output_term = ""
version_now="V_2021_09_26"
Appr_type_now="Data_GapFilled"
list.files(file.path(orig_loctem,"work_1/2018_Dichotomy/FINAL/Submission/00_Prepare_for_submission"))
origin = "/Volumes/bgi/work_1/2018_Dichotomy/FINAL/Submission/00_Prepare_for_submission"
# origin="/Net/Groups/BGI/work_1/2018_Dichotomy/FINAL/Submission/00_Prepare_for_submission"
new_origin = "/Volumes/bgi/work_1/2018_Dichotomy/FINAL/Submission/01_Complete_for_submission"
list.files(origin)
# load functions
source(file.path(origin,"scripts" ,"_main","fn_functions.R"))
output_term="obs"
list.files(file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr"))
if(output_term==""|output_term=="obs"|output_term=="PCA"|output_term=="NOsel"|
output_term=="climLat"|output_term=="soilLat"){
TRY_Env2_Kier <- as.data.frame(read.csv(file=file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr",
paste0("TRY_Env2_Kier_20210926.csv"))))
}
if(output_term=="woody"|output_term=="non_woody"){
TRY_Env2_Kier <- as.data.frame(read.csv(file=file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr",
paste0("TRY_Env2_KierWoN_20210926.csv"))))
}
if(output_term=="grid"){
load(file= file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr",paste0("TRY_Env2",output_term,"_Kier_20191111.RData")))
}
if(output_term=="bias1"|output_term=="bias2"|output_term=="bias3"){
TRY_Env2_Kier <- as.data.frame(read.csv(file=file.path(origin,"data","master_matrix","_aggregated_agg2","NA_mnNbr",
paste0("TRY_Env2",output_term,"_Kier_20210926.csv"))))
}
TRY_Env_o=TRY_Env2_Kier
TRY_Env_data=TRY_Env2_Kier
if(output_term=="PCA"){output_term2=""}
if(output_term!="PCA"){output_term2=output_term}
out <- prep_TRY_Env(origin,output_term2,TRY_Env_data=TRY_Env_o)
prep_TRY_Env <- function(origin,output_term,TRY_Env_data){
spec_count=20
print("cut to appropriate df")
if(output_term!="biome"&output_term!="obs"){
TRY_Env <- TRY_Env_data[,-c(grep(names(TRY_Env_data),pattern = "_pred"),
grep(names(TRY_Env_data),pattern = "_obs"))]
names(TRY_Env) <- gsub(names(TRY_Env),pattern = "_gf",replacement = "")
}
if(output_term=="obs"){
TRY_Env <- TRY_Env_data[,-c(grep(names(TRY_Env_data),pattern = "_pred"),
grep(names(TRY_Env_data),pattern = "_gf"))]
names(TRY_Env) <- gsub(names(TRY_Env),pattern = "_obs",replacement = "")
}
if(output_term=="biome"){TRY_Env <- TRY_Env_data}
if(output_term=="woody"){
TRY_Env <- TRY_Env[,-c(grep(names(TRY_Env),pattern = "_nw"))]
names(TRY_Env) <- gsub(names(TRY_Env),pattern = "_w",replacement = "")
}
if(output_term=="non_woody"){
TRY_Env <- TRY_Env[,-c(grep(names(TRY_Env),pattern = "_w"))]
names(TRY_Env) <- gsub(names(TRY_Env),pattern = "_nw",replacement = "")
}
# ---------------------------------------------------------------------------------------
# prepare Data
# ---------------------------------------------------------------------------------------
print("split into traits and environment (soil & climate)")
# split into traits and environment (soil & climate)
traits_1 <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="trait"]
soil_1 <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="soil"]
climate_1 <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="climate"]
info_1 <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
if(output_term=="obs"|output_term=="obs_sel"){traits_1 <- traits_1[,colSums(!is.na(traits_1))>50]}
data_master_1 <- cbind(info_1,traits_1,soil_1,climate_1)
data_envir_1 <- cbind(soil_1,climate_1)
# ---------------------------------------------------------------------------------------
# index data
# ---------------------------------------------------------------------------------------
# cut out missing ER data
print("cut out missing ER data")
#print(paste("exclude",data_master_1$ECO_NAME[which(rowSums(is.na(data_master_1))!=0)]))
if(output_term!="obs"){ data_master_2 <-   data_master_1[which(rowSums(is.na(data_master_1))==0),]}
if(output_term=="obs"){ data_master_2 <-   data_master_1[which(rowSums(is.na(data_envir_1))==0),]}
print(paste("no missings",sum(is.na(data_master_2))==0))
print(paste("total nb ERs or grids..: ",nrow(data_master_2)))
# chose index
if(output_term=="NOsel"){    ix <- data_master_2$species.count > 0}
if(output_term==""){         ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="bias1"){    ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="bias2"){    ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="bias3"){    ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="woody"){    ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="non_woody"){ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="climLat"){  ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="soilLat"){  ix <- data_master_2$species.count > data_master_2$Kier_richness * 0.01 & data_master_2$species.count > spec_count}
if(output_term=="grid"){     ix <-  data_master_2$species.count > 0}
if(output_term=="obs"){      ix <- rep(TRUE,nrow(data_master_2))}
dim(data_master_2)
print(paste0("We keep ",sum(ix)," Ecoregions (or grids), with ", ncol(soil_1), " soil- and ", ncol(climate_1)," climate factors."))
# ---------------------------------------------------------------------------------------
#  Data
# ---------------------------------------------------------------------------------------
soil_2 <- data_master_2[ix,Rename_Vars(names(data_master_2))[,2]=="soil"]
climate_2 <- data_master_2[ix,Rename_Vars(names(data_master_2))[,2]=="climate"]
trait_2 <- data_master_2[ix,Rename_Vars(names(data_master_2))[,2]=="trait"]
info_2 <- data_master_2[ix,c(which(names(data_master_2)=="Kier_richness"|
names(data_master_2)=="ECO_ID"|
names(data_master_2)=="ECO_NAME"|
names(data_master_2)=="BIOME"|
names(data_master_2)=="species.count"|
names(data_master_2)=="observation.count.tot"|
names(data_master_2)=="Lat"|
names(data_master_2)=="Lon"|
names(data_master_2)=="min.lat"|
names(data_master_2)=="max.lat"|
names(data_master_2)=="min.lon"|
names(data_master_2)=="max.lon"|
names(data_master_2)=="Kier_area"),
grep(names(data_master_2),pattern = "observation.count."))]
climate_water<- data_master_2[ix,Rename_Vars(names(data_master_2))[,7]=="climate_water"]
climate_energy <- data_master_2[ix,Rename_Vars(names(data_master_2))[,7]=="climate_energy"]
soil_physics <- data_master_2[ix,Rename_Vars(names(data_master_2))[,4]=="soil_physics"]
soil_chemistry <- data_master_2[ix,Rename_Vars(names(data_master_2))[,4]=="soil_chemistry"]
if(output_term!="climLat"){
noise=as.data.frame(matrix(NA,ncol=ncol(soil_2),nrow=(nrow(soil_2))))
for(i in 1:ncol(soil_2)){
noise[,i]= rnorm(nrow(soil_2),mean = sample(x = c(-5:+5),size = 1),sd= sample(c(.5,.4,.3,.2,.1,5,4,3,2,1),size = 1))
}
colnames(noise) = paste0("noise",1:ncol(noise))
}else{noise=NA}
dim(trait_2)
dim(soil_2)
dim(climate_2)
out=list(info=info_2,
trait=trait_2,
soil=soil_2,
climate=climate_2,
noise=noise,
climate_water=climate_water,
climate_energy=climate_energy,
soil_physics=soil_physics,
soil_chemistry=soil_chemistry
)
return(out)
}
out <- prep_TRY_Env(origin,output_term2,TRY_Env_data=TRY_Env_o)
info = out$info
trait = out$trait
trait_o = out$trait
if(output_term==""|output_term=="PCA"){
require(FactoMineR)
pca.trait <- PCA(log(trait_o),ncp = 5)
trait_pca <- pca.trait$ind$coord
colnames(trait_pca) <- paste0("trait_PCA_",1:ncol(trait_pca))
}
soil = out$soil
climate = out$climate
noise=out$noise
climate_energy = out$climate_energy
climate_water = out$climate_water
soil_physics=out$soil_physics
soil_chemistry=out$soil_chemistry
TRY_Env <- list()
TRY_Env$info <- info
TRY_Env$trait <- trait
TRY_Env$soil <- soil
TRY_Env$climate <- climate
TRY_Env$lat <- info$Lat
if(output_term=="PCA"){
TRY_Env$trait=trait_pca
TRY_Env$climate_energy <- climate_energy
TRY_Env$climate_water <- climate_water
TRY_Env$soil_physics <- soil_physics
TRY_Env$soil_chemistry <- soil_chemistry
}
if(output_term==""){
TRY_Env$trait_pca <- trait_pca
TRY_Env$noise <- noise
TRY_Env$climate_energy <- climate_energy
TRY_Env$climate_water <- climate_water
TRY_Env$soil_physics <- soil_physics
TRY_Env$soil_chemistry <- soil_chemistry
}
sum(complete.cases(soil))==nrow(soil)
sum(!is.na(soil))==length(soil)#may be latitude
sum(complete.cases(trait))==nrow(trait)
sum(complete.cases(climate))==nrow(climate)
sum(!is.na(climate))==length(climate)#may be latitude
#    write.csv(TRY_Env,file=file.path(origin,"data","master_matrix",paste0("TRY_Env2_",output_term,"_2021.csv")))
if(!dir.exists(file.path(new_origin,"data","master_matrix","csv"))){
dir.create(file.path(new_origin,"data","master_matrix","csv"))
}
if(!dir.exists(file.path(new_origin,"data","master_matrix","csv",output_term))){
dir.create(file.path(new_origin,"data","master_matrix","csv",output_term))
}
output_term
save(TRY_Env,file=             file.path(new_origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
write.csv(TRY_Env$info,file =  file.path(new_origin,"data","master_matrix",paste0("X2_info.csv")))
write.csv(TRY_Env$trait,file = file.path(new_origin,"data","master_matrix",paste0("X2_trait.csv")))
write.csv(TRY_Env$soil,file =  file.path(new_origin,"data","master_matrix",paste0("X2_soil.csv")))
write.csv(TRY_Env$climate,file=file.path(new_origin,"data","master_matrix",paste0("X2_climate.csv")))
if(output_term==""){
write.csv(TRY_Env$soil_chemistry,file = file.path(new_origin,"data","master_matrix",paste0("X2_soil_chemistry.csv")))
write.csv(TRY_Env$soil_physics,file = file.path(new_origin,"data","master_matrix",paste0("X2_soil_physics.csv")))
write.csv(TRY_Env$climate_water,file = file.path(new_origin,"data","master_matrix",paste0("X2_climate_water.csv")))
write.csv(TRY_Env$climate_energy,file = file.path(new_origin,"data","master_matrix",paste0("X2_climate_energy.csv")))
write.csv(TRY_Env$noise,file = file.path(new_origin,"data","master_matrix",paste0("X2_noise.csv")))
write.csv(TRY_Env$trait_pca,file = file.path(new_origin,"data","master_matrix",paste0("X2_trait_pca.csv")))
}
print("---------------------------------------------")
print(file.path(output_term))
print("---------------------------------------------")
new_origin
origin = "/Users/jjoswig/Documents/_docs/03_projects/2021/002_Dichotomy/_script_data/put_into_repository/Supplement"
list.files(file.path(origin,"scripts/_master"))
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))# check, this does not exist.
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
#install.packages("dplyr")
# ------------
# load data
# ------------
output_term="obs"
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
info=TRY_Env$info
trait=TRY_Env$trait
if(output_term=="PCA"){
require(FactoMineR)
pca_trait=PCA(log(trait))
trait <- pca_trait$ind$coord[,1:3]
}
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
if(output_term=="climLat"){soil = latitude}
if(output_term=="soilLat"){climate = latitude}
noise = TRY_Env$noise
climate_energy = TRY_Env$climate_energy
climate_water = TRY_Env$climate_water
soil_physics=TRY_Env$soil_physics
soil_chemistry=TRY_Env$soil_chemistry
head(trait)
if(doLM&(output_term==""|output_term=="obs"|output_term=="PCA")){
if(output_term==""){print("do lm for Supplementary Figure 15.")}
if(output_term=="obs"){print("do lm for Supplementary Figure 16.")
X1 <- load.csv(file = file.path(origin,"data","master_matrix",paste0("X1_",output_term,"_NEE.csv")))
}
if(output_term=="PCA"){print("do lm for Supplementary Figure 34-37.")}
nruns = nruns_LM # number of repetitions for linear models
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(1:nrow(trait),folds)
names(chunk_list[[i]] ) <- 1:folds
}
climOsoils=c("climate","soil","soilAclimate")#
climOsoil="soilAclimate"
if(output_term=="PCA"){climOsoils=c("soilAclimate")}
ncomp_PCA=20
for(climOsoil in climOsoils){
print(climOsoil)
result_lm <- analysis_lm(climate,soil=soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA=TRUE,ncomp_PCA)
}
}else{
print("No linear model.")}
#------------------------------------------------------------------------------------
# 02 load data for visualization purposes
#------------------------------------------------------------------------------------
output_term = "obs" # defines with which subset the analysis will be done  (latitude versus soil or climate)
list.files(file.path(origin,"data","master_matrix"))
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
head(TRY_Env$trait)
dim(TRY_Env$trait)
doPCA = FALSE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = FALSE # define if ridge regression analysis to be done
doPLS = FALSE # define if PLS analysis to be done
doRF  = FALSE # define if random forest analysis to be done
doLM  = TRUE# define if linear model analysis to be done
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
model_analyses <- function(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS){
#install.packages("dplyr")
# ------------
# load data
# ------------
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
info=TRY_Env$info
trait=TRY_Env$trait
if(output_term=="PCA"){
require(FactoMineR)
pca_trait=PCA(log(trait))
trait <- pca_trait$ind$coord[,1:3]
}
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
if(output_term=="climLat"){soil = latitude}
if(output_term=="soilLat"){climate = latitude}
noise = TRY_Env$noise
climate_energy = TRY_Env$climate_energy
climate_water = TRY_Env$climate_water
soil_physics=TRY_Env$soil_physics
soil_chemistry=TRY_Env$soil_chemistry
head(trait)
#---------------------------------------------------------------------------------------
# ANALYSES
# LM
#----------------------------------------------------------------------------------------
if(doLM&(output_term==""|output_term=="obs"|output_term=="PCA")){
if(output_term==""){print("do lm for Supplementary Figure 15.")}
if(output_term=="obs"){print("do lm for Supplementary Figure 16.")}
if(output_term=="PCA"){print("do lm for Supplementary Figure 34-37.")}
nruns = nruns_LM # number of repetitions for linear models
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(1:nrow(trait),folds)
names(chunk_list[[i]] ) <- 1:folds
}
climOsoils=c("climate","soil","soilAclimate")#
climOsoil="soilAclimate"
if(output_term=="PCA"){climOsoils=c("soilAclimate")}
ncomp_PCA=20
for(climOsoil in climOsoils){
print(climOsoil)
result_lm <- analysis_lm(climate,soil=soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA=TRUE,ncomp_PCA)
}
}else{
print("No linear model.")}
#----------------------------------------------------------------------------------------
# Ridge Regression
#----------------------------------------------------------------------------------------
if(doRR){
print("do Ridge Regression")
nruns = nruns_RR # number of repetitions for ridge regression
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10 # number of folds for cross validation
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
#define
if(output_term==""){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the noise run (supplementary):
"noise","noiseAclimate","soilAnoise",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")}
if(output_term!=""){
climOsoils=c("climate","soil","soilAclimate")
if(output_term=="PCA"){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")
}
}
ncomp_PCA=20
try(colSums(!is.na(trait)))
climOsoil="soil"
for(climOsoil in climOsoils){
print(climOsoil)
result_ridge <- analysis_RidgeRegression(climate,soil,trait,
noise,
climate_energy,climate_water,
soil_chemistry,soil_physics,
origin,Appr_type_now,climOsoil,
nruns,output_term,chunk_list,ncomp_PCA,folds,doPCA)
}
}else{
print("No Ridge Regression.")}
#---------------------------------------------------------------------------------------
# PLS
#----------------------------------------------------------------------------------------
if(doPLS & output_term==""){
print("do PLS for supplementary")
print(paste0("PCA: ",doPLS))
nruns = nruns_PLS # number of repetitions for partial least squares (PLS)
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
require(foreach)
require(doParallel)
registerDoParallel(cores = 3)
climOsoils=c("climate","soil","soilAclimate")
for(climOsoil in climOsoils){
print(climOsoil)
result_pls <- analysis_pls(climate,soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA,ncomp_PCA=20)
}
}else{
print("No PLS.")}
#----------------------------------------------------------------------------------------
# Random Forest
#----------------------------------------------------------------------------------------
if(doRF & output_term==""& !doPCA){
nruns = nruns_RF # number of repetitions for random forest
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
climOsoils=c("climate","soil","soilAclimate")
for(climOsoil in climOsoils){
print(climOsoil)
result_rf <- analysis_RandomForest(climate,soil,trait,origin,
climOsoil,nruns,folds,output_term,chunk_list = chunk_list,ncomp_PCA=20)
}
}else{
print("No Random Forest.")}
}
doPCA = FALSE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = FALSE # define if ridge regression analysis to be done
doPLS = FALSE # define if PLS analysis to be done
doRF  = FALSE # define if random forest analysis to be done
doLM  = TRUE# define if linear model analysis to be done
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
nruns_RR = 50 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
nruns_LM = 50 # number of model building repetitions for linear models, final version = 50, for quick version nruns=2
nruns_RF = 2 # number of model building repetitions for random forest, 2
nruns_PLS = 10 # number of model building repetitions for linear models, final version = 10, for quick version nruns=2
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
#install.packages("dplyr")
# ------------
# load data
# ------------
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,"_NEE.RData")))
info=TRY_Env$info
trait=TRY_Env$trait
if(output_term=="PCA"){
require(FactoMineR)
pca_trait=PCA(log(trait))
trait <- pca_trait$ind$coord[,1:3]
}
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
if(output_term=="climLat"){soil = latitude}
if(output_term=="soilLat"){climate = latitude}
noise = TRY_Env$noise
climate_energy = TRY_Env$climate_energy
climate_water = TRY_Env$climate_water
soil_physics=TRY_Env$soil_physics
soil_chemistry=TRY_Env$soil_chemistry
head(trait)
if(output_term==""){print("do lm for Supplementary Figure 15.")}
if(output_term=="obs"){print("do lm for Supplementary Figure 16.")}
if(output_term=="PCA"){print("do lm for Supplementary Figure 34-37.")}
nruns = nruns_LM # number of repetitions for linear models
nruns
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(1:nrow(trait),folds)
names(chunk_list[[i]] ) <- 1:folds
}
climOsoils=c("climate","soil","soilAclimate")#
climOsoil="soilAclimate"
ncomp_PCA=20
print(climOsoil)
result_lm <- analysis_lm(climate,soil=soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA=TRUE,ncomp_PCA)
result_lm <- analysis_lm(climate,soil=soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA,ncomp_PCA)
