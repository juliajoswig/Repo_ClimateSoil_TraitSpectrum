margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
output_term="non_woody"
# read data, produced earlier.
# load data of species per ecoregion aggregation level
if(output_term=="woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_gf",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_gf",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_non_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_gf",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_gf",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
# dat_cor <- read.csv(file=file.path(origin_new,"data","helper_files","fig_S1",output_term,"trait_correlations.csv"))
#  rownames(dat_cor) <- dat_cor[,1]
#  dat_cor <- dat_cor[,-which(colnames(dat_cor)=="X")]
#  colnames(dat_cor) <- rownames(dat_cor)
dat_cor_m <- as.matrix(dat_cor)
# creates an own color palette from red to green
my_palette <- colorRampPalette(c("white","#edf8fb","#b3cde3","#8c96c6","#88419d"))(n = 499)# Plum
my_palette <- colorRampPalette(c("white","#fef0d9","#fdcc8a","#fc8d59","#d7301f"))(n = 499)# Terra Cotta
my_palette <- colorRampPalette(c("white","#f7fcb9","#addd8e","#31a354"))(n = 499)# summer green
col_breaks = c(seq(0,0.1,length=100),  # for red
seq(.11,.2,length=100),
seq(.21,+.35,length=100),
seq(0.36,0.5,length=100), # for yellow
seq(0.51,1,length=100))     # for blue
dat_cor_p <- round(abs(dat_cor_m),digits=2)
dat_cor_p[dat_cor_p==1] <- NA
if(!dir.exists(file.path(origin,"figures","Supplement_Fig_7"))){
dir.create(file.path(origin,"figures","Supplement_Fig_7"))}
# plot.
pdf(file=file.path(origin,"figures","Supplement_Fig_7",paste0("figure_b",output_term,".pdf")),height=8,width=9)
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
dev.off()
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
# please select:
output_term="woody"
#output_term="non_woody"
# read data, produced earlier.
# load data of species per ecoregion aggregation level
if(output_term=="woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_non_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_gf",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_gf",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
# dat_cor <- read.csv(file=file.path(origin_new,"data","helper_files","fig_S1",output_term,"trait_correlations.csv"))
#  rownames(dat_cor) <- dat_cor[,1]
#  dat_cor <- dat_cor[,-which(colnames(dat_cor)=="X")]
#  colnames(dat_cor) <- rownames(dat_cor)
dat_cor_m <- as.matrix(dat_cor)
#  for(i in 1:ncol(dat_cor)){dat_cor_m[,i] <- as.numeric(dat_cor_m[,i])}
# creates an own color palette from red to green
my_palette <- colorRampPalette(c("white","#edf8fb","#b3cde3","#8c96c6","#88419d"))(n = 499)# Plum
my_palette <- colorRampPalette(c("white","#fef0d9","#fdcc8a","#fc8d59","#d7301f"))(n = 499)# Terra Cotta
my_palette <- colorRampPalette(c("white","#f7fcb9","#addd8e","#31a354"))(n = 499)# summer green
col_breaks = c(seq(0,0.1,length=100),  # for red
seq(.11,.2,length=100),
seq(.21,+.35,length=100),
seq(0.36,0.5,length=100), # for yellow
seq(0.51,1,length=100))     # for blue
dat_cor_p <- round(abs(dat_cor_m),digits=2)
dat_cor_p[dat_cor_p==1] <- NA
# create figure folder
if(!dir.exists(file.path(origin,"figures","Supplement_Fig_7"))){
dir.create(file.path(origin,"figures","Supplement_Fig_7"))}
# plot.
pdf(file=file.path(origin,"figures","Supplement_Fig_7",paste0("figure_b",output_term,".pdf")),height=8,width=9)
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
dev.off()
output_term="non_woody"
# read data, produced earlier.
# load data of species per ecoregion aggregation level
if(output_term=="woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_non_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_gf",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_gf",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
# dat_cor <- read.csv(file=file.path(origin_new,"data","helper_files","fig_S1",output_term,"trait_correlations.csv"))
#  rownames(dat_cor) <- dat_cor[,1]
#  dat_cor <- dat_cor[,-which(colnames(dat_cor)=="X")]
#  colnames(dat_cor) <- rownames(dat_cor)
dat_cor_m <- as.matrix(dat_cor)
#  for(i in 1:ncol(dat_cor)){dat_cor_m[,i] <- as.numeric(dat_cor_m[,i])}
# creates an own color palette from red to green
my_palette <- colorRampPalette(c("white","#edf8fb","#b3cde3","#8c96c6","#88419d"))(n = 499)# Plum
my_palette <- colorRampPalette(c("white","#fef0d9","#fdcc8a","#fc8d59","#d7301f"))(n = 499)# Terra Cotta
my_palette <- colorRampPalette(c("white","#f7fcb9","#addd8e","#31a354"))(n = 499)# summer green
col_breaks = c(seq(0,0.1,length=100),  # for red
seq(.11,.2,length=100),
seq(.21,+.35,length=100),
seq(0.36,0.5,length=100), # for yellow
seq(0.51,1,length=100))     # for blue
dat_cor_p <- round(abs(dat_cor_m),digits=2)
dat_cor_p[dat_cor_p==1] <- NA
# create figure folder
if(!dir.exists(file.path(origin,"figures","Supplement_Fig_7"))){
dir.create(file.path(origin,"figures","Supplement_Fig_7"))}
# plot.
pdf(file=file.path(origin,"figures","Supplement_Fig_7",paste0("figure_b",output_term,".pdf")),height=8,width=9)
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
dev.off()
"SSD","LeC","LeNP","LeP","LeNArea","SLA","LeN", "VesLen","Led15N","SenbU")
# please select:
output_term="woody"
#output_term="non_woody"
# read data, produced earlier.
# load data of species per ecoregion aggregation level
if(output_term=="woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_non_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_pred",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_pred",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
# dat_cor <- read.csv(file=file.path(origin_new,"data","helper_files","fig_S1",output_term,"trait_correlations.csv"))
#  rownames(dat_cor) <- dat_cor[,1]
#  dat_cor <- dat_cor[,-which(colnames(dat_cor)=="X")]
#  colnames(dat_cor) <- rownames(dat_cor)
dat_cor_m <- as.matrix(dat_cor)
#  for(i in 1:ncol(dat_cor)){dat_cor_m[,i] <- as.numeric(dat_cor_m[,i])}
# creates an own color palette from red to green
my_palette <- colorRampPalette(c("white","#edf8fb","#b3cde3","#8c96c6","#88419d"))(n = 499)# Plum
my_palette <- colorRampPalette(c("white","#fef0d9","#fdcc8a","#fc8d59","#d7301f"))(n = 499)# Terra Cotta
my_palette <- colorRampPalette(c("white","#f7fcb9","#addd8e","#31a354"))(n = 499)# summer green
col_breaks = c(seq(0,0.1,length=100),  # for red
seq(.11,.2,length=100),
seq(.21,+.35,length=100),
seq(0.36,0.5,length=100), # for yellow
seq(0.51,1,length=100))     # for blue
dat_cor_p <- round(abs(dat_cor_m),digits=2)
dat_cor_p[dat_cor_p==1] <- NA
# create figure folder
if(!dir.exists(file.path(origin,"figures","Supplement_Fig_7"))){
dir.create(file.path(origin,"figures","Supplement_Fig_7"))}
# plot.
pdf(file=file.path(origin,"figures","Supplement_Fig_7",paste0("figure_b",output_term,".pdf")),height=8,width=9)
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
dev.off()
output_term="non_woody"
# read data, produced earlier.
# load data of species per ecoregion aggregation level
if(output_term=="woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_woody.csv"))}
if(output_term=="non_woody"){TRY_Env1 <- read.csv(file.path(origin,"data","master_matrix","X1_non_woody.csv"))}
# select data for trait-trait relationships: traits that are imputed.
X1_trait <- TRY_Env1[,Rename_Vars(gsub(colnames(TRY_Env1),pattern = "_pred",replacement = ""))[,2]=="trait"]
colnames(X1_trait) <- gsub(colnames(X1_trait),pattern = "_pred",replacement = "")
dim(X1_trait)
dat_cor <- cor(X1_trait)
# dat_cor <- read.csv(file=file.path(origin_new,"data","helper_files","fig_S1",output_term,"trait_correlations.csv"))
#  rownames(dat_cor) <- dat_cor[,1]
#  dat_cor <- dat_cor[,-which(colnames(dat_cor)=="X")]
#  colnames(dat_cor) <- rownames(dat_cor)
dat_cor_m <- as.matrix(dat_cor)
#  for(i in 1:ncol(dat_cor)){dat_cor_m[,i] <- as.numeric(dat_cor_m[,i])}
# creates an own color palette from red to green
my_palette <- colorRampPalette(c("white","#edf8fb","#b3cde3","#8c96c6","#88419d"))(n = 499)# Plum
my_palette <- colorRampPalette(c("white","#fef0d9","#fdcc8a","#fc8d59","#d7301f"))(n = 499)# Terra Cotta
my_palette <- colorRampPalette(c("white","#f7fcb9","#addd8e","#31a354"))(n = 499)# summer green
col_breaks = c(seq(0,0.1,length=100),  # for red
seq(.11,.2,length=100),
seq(.21,+.35,length=100),
seq(0.36,0.5,length=100), # for yellow
seq(0.51,1,length=100))     # for blue
dat_cor_p <- round(abs(dat_cor_m),digits=2)
dat_cor_p[dat_cor_p==1] <- NA
# create figure folder
if(!dir.exists(file.path(origin,"figures","Supplement_Fig_7"))){
dir.create(file.path(origin,"figures","Supplement_Fig_7"))}
# plot.
pdf(file=file.path(origin,"figures","Supplement_Fig_7",paste0("figure_b",output_term,".pdf")),height=8,width=9)
heatmap.2(dat_cor_p,
cellnote = dat_cor_p,  # same data set for cell labels
notecol="black",      # change font color of cell labels to black
#            Colv = c(3:7,1,4:17),#c(9,16,8,7,14,1,15,2,4,11,6,10,3,5,17,12,13),
RowSideColors = color_to_traits(colnames(dat_cor_p)), # links to original trait group
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row"     # only draw a row dendrogram
)
dev.off()
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
# packages
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))
nruns=50
output_term="woody"
#output_term="non_woody"
doPCA=TRUE
climOsoil="soilAclimate"
if(!file.exists(file.path(origin,"figures","Supplement_Fig_12"))){
dir.create(file.path(origin,"figures","Supplement_Fig_12"))}
#plot_Figure_Bias <- function(origin,nruns,doPCA,climOsoil,output_term){
require(likert)
#-------------
# load data
#-------------
target_order1=c("SeLen","DispULen","SeedMass","PlantHeight","LeFMass","LeArea","ConduitDens",
"SSD","LeC","LeNP","LeP","LeNArea","SLA","LeN", "VesLen","Led15N","SenbU")
list.files(file.path(origin, "data", "_results","HierarchicalPartitioning","_RidgeRegression_results"))
list.files(file.path(origin, "data", "_results","RidgeRegression"))
if(doPCA){pca_term="doPCA"}
load(file.path(origin, "data", "_results","RidgeRegression","_RidgeRegression_results",
paste0("HP_",nruns,"nruns_", output_term,pca_term,".RData")))
hp_now <- hp_l[[which(names(hp_l)%in%climOsoil)]]
title <- ""
# data processing
m <- matrix(NA,ncol=4,nrow=ncol(hp_now[[3]]))
m[,1] <- colnames(hp_now[[3]])
m[,2] <- colMeans(hp_now[[2]] - hp_now[[4]])*100# pure indep effect
m[,3] <- colMeans(hp_now[[3]])*2*100# joint effect
m[,4] <- colMeans(hp_now[[1]] - hp_now[[3]])*100# pure indep effect
m[m<0]  = 0
colnames(m)<- c("Item","Independent_climate","Joint","Independent_soil")
df <- data.frame(m)
df <- transform(df,Independent_climate=as.numeric(as.vector(Independent_climate)),
Independent_soil=as.numeric(as.vector(Independent_soil)),
Joint=as.numeric(as.vector(Joint)))
# rename & order
ix <- match(target_order1,df$Item)
df$Item[ix]
df <- df[ix,]
df$Item <- Rename_Vars(df$Item)[,3]
dfs <- likert(summary = df)
str(dfs)
#The items are not present, but the likert object can still be summarised:
summary(dfs)
#Plots
scale_height = knitr::opts_chunk$get('fig.height')*2.5
scale_width = knitr::opts_chunk$get('fig.width')*.7
knitr::opts_chunk$set(fig.height = scale_height, fig.width = scale_width)
theme_update(legend.text = element_text(size = rel(1)))
out <- list()
out$dfs <- dfs
out$target.order <-  Rename_Vars(target_order1)[,3]
if(output_term=="non_woody"){pdf(file=file.path(origin,"figures","Supplement_Fig_12",paste0("Supplement_Fig_12a.pdf")))  }
if(output_term=="woody"){pdf(file=file.path(origin,"figures","Supplement_Fig_12",paste0("Supplement_Fig_12b.pdf")))  }
par(mfrow=c(1,1),mar=c(8,8,2,2))
try(plot(out$dfs,group.order = out$target.order) +
ggtitle(title)+
ylab("% of trait variance explained by climate and/or soil")+
scale_fill_manual(values=c(climate_col, "lightgray", soil_col),
drop=FALSE))
dev.off()
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
# packages
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))
trait_now=1
trait_name_now = "Trait name"
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18"))}
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18","Barplot"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18","Barplot"))}
par(mfrow=c(1,3),mar=c(2.5,5,1.5,1))
s=as.matrix(c(.2,.2,.25))
s[s<0]=0
c=as.matrix(c(.25,.2,.2))
c[c<0]=0
tot=as.matrix(c(.1,.6,.1))
tot[tot<0]=0
rownames(tot) <- c("Independent Effect Climate","Joint Climate and Soil Effect","Independent Effect Soil")
rownames(c) <- c("Independent Effect Climate Water","Joint Climate Water and Energy","Independent Effect Climate Energy")
rownames(s) <- c("Independent Effect Soil Chemistry","Joint Soil Chemistry and Physics","Independent Effect Soil Physics")
barplot(as.matrix(tot[3:1]),
las=3,ylim=c(0,1),ylab="Variance explained",
col=c(soil_S4,"lightgray",climate_S4),cex.lab=2,cex.axis=2)
axis(1,labels = "Variance Explained by Climate and Soil",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(tot)), col = c(climate_S4,"lightgray",soil_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(c[3:1]),yaxt="n",
las=3,ylim=c(0,1),ylab="",main= "",
col=c(climtype2_S4,"lightgray",climtype1_S4))
axis(1,labels = "Variance Explained by Climate",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(c)), col =c(climtype1_S4,"lightgray",climtype2_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(s[3:1]),yaxt="n",
las=3,ylim=c(0,1),ylab="",
col=c(soiltype2_S4,"lightgray",soiltype1_S4))
axis(1,labels = "Variance Explained by Soil",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(s)), col =c(soiltype1_S4,"lightgray",soiltype2_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
pdf(file = file.path(origin,"figures","Supplement_Fig_18","Barplot",paste0("Template_Barplot.pdf")),pointsize = 11,height=4,width=10)
par(mfrow=c(1,3),mar=c(2.5,5,1.5,1))
s=as.matrix(c(.2,.2,.25))
s[s<0]=0
c=as.matrix(c(.25,.2,.2))
c[c<0]=0
tot=as.matrix(c(.1,.6,.1))
tot[tot<0]=0
rownames(tot) <- c("Independent Effect Climate","Joint Climate and Soil Effect","Independent Effect Soil")
rownames(c) <- c("Independent Effect Climate Water","Joint Climate Water and Energy","Independent Effect Climate Energy")
rownames(s) <- c("Independent Effect Soil Chemistry","Joint Soil Chemistry and Physics","Independent Effect Soil Physics")
barplot(as.matrix(tot[3:1]),
las=3,ylim=c(0,1),ylab="Variance explained",
col=c(soil_S4,"lightgray",climate_S4),cex.lab=2,cex.axis=2)
axis(1,labels = "Variance Explained by Climate and Soil",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(tot)), col = c(climate_S4,"lightgray",soil_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(c[3:1]),yaxt="n",
las=3,ylim=c(0,1),ylab="",main= "",
col=c(climtype2_S4,"lightgray",climtype1_S4))
axis(1,labels = "Variance Explained by Climate",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(c)), col =c(climtype1_S4,"lightgray",climtype2_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(s[3:1]),yaxt="n",
las=3,ylim=c(0,1),ylab="",
col=c(soiltype2_S4,"lightgray",soiltype1_S4))
axis(1,labels = "Variance Explained by Soil",at = .7,tick = F,cex.axis=1.5)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(s)), col =c(soiltype1_S4,"lightgray",soiltype2_S4),cex=1.5,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
dev.off()
list.files(file.path(origin,"scripts/_master"))
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
# packages
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18"))}
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18","Barplot"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18","Barplot"))}
list.files(file.path(origin,"data","_results","RidgeRegression","_RidgeRegression_results"))
nruns=50
output_term=""
doPCA=TRUE
if(doPCA){doPCA_term="doPCA"}
if(!doPCA){doPCA_term=""}
load(file.path(origin,"data","_results","RidgeRegression","_RidgeRegression_results",paste0("HP_",nruns,"nruns_",output_term,doPCA_term,".RData")))
load(file.path(origin,"data","_results","RidgeRegression","_RidgeRegression_results",paste0("R2_",nruns,"nruns_",output_term,doPCA_term,".RData")))
hp_up = hp_l[[which(names(hp_l)%in%"soilAclimate")]]
hp_low1 = hp_l[[which(names(hp_l)%in%c("climate_waterAclimate_energy"))]]
hp_low2 = hp_l[[which(names(hp_l)%in%c("soil_chemistryAsoil_physics"))]]
r2_up = r2_l[[which(names(r2_l)%in%"soilAclimate")]]
r2_low1 = r2_l[[which(names(r2_l)%in%c("climate_waterAclimate_energy"))]]
r2_low2 = r2_l[[which(names(r2_l)%in%c("soil_chemistryAsoil_physics"))]]
#------------------------------------------
# pure independent effect of subgroups climate (indep - joint) & joint
all_effects_climate = rbind(colMeans(hp_low1$indep_climate_water - hp_low1$joint_climate_water),
colMeans(hp_low1$joint_climate_water + hp_low1$joint_climate_energy),
colMeans(hp_low1$indep_climate_energy - hp_low1$joint_climate_energy))
rownames(all_effects_climate) <- c("climate water","joint","climate energy")
# pure independent effect of subgroups soil (indep - joint) & joint
all_effects_soil = rbind(colMeans(hp_low2$indep_soil_chemistry - hp_low2$joint_soil_chemistry),
colMeans(hp_low2$joint_soil_chemistry + hp_low2$joint_soil_physics),
colMeans(hp_low2$indep_soil_physics - hp_low2$joint_soil_physics))
rownames(all_effects_soil) <- c("soil chemistry","joint","soil physics")
#------------------------------------------
# pure independent effect of subgroups total (indep - joint) & joint
all_effects_tot = rbind(colMeans(hp_up$indep_climate - hp_up$joint_climate),
colMeans(hp_up$joint_climate + hp_up$joint_soil),
colMeans(hp_up$indep_soil - hp_up$joint_soil))
rownames(all_effects_tot) <- c("climate","joint","soil")
# check:
#  plot(colSums(all_effects_climate),colSums(all_effects_soil) )
#  plot(all_effects_tot[3,],colSums(all_effects_soil) )
#  plot(all_effects_tot[1,],colSums(all_effects_climate) )
#  plot(all_effects_tot[1,],all_effects_tot[3,])
trait_now=6
for(trait_now in 1:17){
trait_name_now = colnames(all_effects_soil)[trait_now]
pdf(file = file.path(origin,"figures","Supplement_Fig_18","Barplot",paste0(colnames(all_effects_soil)[trait_now],"_Barplot.pdf")),
pointsize = 11,height=4,width=10)
par(mfrow=c(1,3),mar=c(3.5,6,1.5,1))
s=all_effects_soil
s[s<0]=0
c=all_effects_climate
c[c<0]=0
tot=all_effects_tot
tot[tot<0]=0
colnames(s) <- Rename_Vars(colnames(s))[,3]
barplot(as.matrix(tot[3:1,trait_now]),
las=3,ylim=c(0,1),ylab="Variance explained",
col=c(soil_S4,"lightgray",climate_S4),cex.lab=3,cex.axis=2)
axis(1,labels = "Climate and Soil",at = .7,tick = F,cex.axis=3,line = 1)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(tot)), col = c(climate_S4,"lightgray",soil_S4),cex=2,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(c[3:1,trait_now]),yaxt="n",
las=3,ylim=c(0,1),ylab="",main= "",
col=c(climtype2_S4,"lightgray",climtype1_S4))
axis(1,labels = "Climate",at = .7,tick = F,cex.axis=3,line = 1)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(c)), col =c(climtype1_S4,"lightgray",climtype2_S4),cex=2,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
barplot(as.matrix(s[3:1,trait_now]),yaxt="n",
las=3,ylim=c(0,1),ylab="",
col=c(soiltype2_S4,"lightgray",soiltype1_S4))
axis(1,labels = "Soil",at = .7,tick = F,cex.axis=3,line = 1)
abline(h = c(0,.1,.2,.3,.4,.5,.6,.7,.8,.9,1),col="lightgray",lty=4)
legend("topright", c(rownames(s)), col =c(soiltype1_S4,"lightgray",soiltype2_S4),cex=2,box.col = "lightgray",
text.col = "black",  pch = c(15, 15, 15),bg = "white")
dev.off()
}
type_analysis="lm"
output_term=""
climOsoil="soilAclimate"
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
list.files(file.path(origin, "data", "_results","lm",climOsoil, paste0(nruns,"Reps")))
load(file=file.path(origin, "data", "_results",type_analysis,climOsoil, paste0(nruns,"Reps"),
paste0("Res_",output_term,pca_term,".RData")))
load(file=file.path(origin, "data", "_results",type_analysis,climOsoil, paste0(nruns,"Reps"),
paste0("Res_",output_term,pca_term,".RData")))
# ---------------------------------------------------------------------------------------
# 01. define the origin path
# ---------------------------------------------------------------------------------------
# origin = # please add your local path here & comment the ones below.
# origin = "/Users/jjoswig/Documents/_docs/03_projects/2021/002_Dichotomy/_script_data/20210907_Script_data/Supplement" # please add your local path here
list.files(file.path(origin,"scripts/_master"))
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
# packages
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18"))}
if(!file.exists(file.path(origin,"figures","Supplement_Fig_18","Trait_Environment"))){
dir.create(file.path(origin,"figures","Supplement_Fig_18","Trait_Environment"))}
type_analysis="lm"
climOsoil="soilAclimate"
doPCA=FALSE
output_term=""
#output_term="PCA"
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
list.files(file.path(origin, "data", "_results","lm",climOsoil, paste0(nruns,"Reps")))
load(file=file.path(origin, "data", "_results",type_analysis,climOsoil, paste0(nruns,"Reps"),
paste0("Res_",output_term,pca_term,".RData")))
library("gplots")
colnames(out$r2_vars) <- Rename_Vars(colnames(out$r2_vars))[,3]
load(file = file.path(origin,"data","master_matrix",paste0("X2",output_term,".RData")))
trait=TRY_Env$trait
load(file = file.path(origin, "data", "_results",type_analysis,climOsoil, paste0(nruns,"Reps"),paste0("Res_",output_term,pca_term,".RData")))
load(file = file.path(origin,"data","master_matrix",paste0("X2",output_term,".RData")))
list.files(file.path(origin,"data","master_matrix"))
output_term
load(file = file.path(origin,"data","master_matrix",paste0("X2_",output_term,".RData")))
