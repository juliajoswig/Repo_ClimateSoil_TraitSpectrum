doRF  = TRUE# define if hierarchichal paritioning for random forest analysis to be done
}
if(mo_now==3){
doPLS = TRUE# define if hierarchichal paritioning f or PLS analysis to be done
doPCA = TRUE # define if hierarchichal paritioning for PCA prior to RR or PLS is to be done analysis to be done
doRR  = FALSE # define if hierarchichal paritioning for ridge regression analysis to be done, woody, non-woody and "" need to be done when run
doRF  = FALSE# define if hierarchichal paritioning for random forest analysis to be done
}
if(mo_now==4){
doPLS = TRUE# define if hierarchichal paritioning f or PLS analysis to be done
doPCA = FALSE # define if hierarchichal paritioning for PCA prior to RR or PLS is to be done analysis to be done
doRR  = FALSE # define if hierarchichal paritioning for ridge regression analysis to be done, woody, non-woody and "" need to be done when run
doRF  = FALSE# define if hierarchichal paritioning for random forest analysis to be done
}
total_hierarchical_partitioning_analyses(origin,output_term,
doPLS,doPCA,doRR,doRF,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
}
}
}
print(paste(c("RR","RF","PLS_PCA","PLS_noPCA")[mo_now]))
doPLS = FALSE# define if hierarchichal paritioning f or PLS analysis to be done
doPCA = TRUE # define if hierarchichal paritioning for PCA prior to RR or PLS is to be done analysis to be done
doRR  = TRUE # define if hierarchichal paritioning for ridge regression analysis to be done, woody, non-woody and "" need to be done when run
mo_now
total_hierarchical_partitioning_analyses(origin,output_term,
doPLS,doPCA,doRR,doRF,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
#------------------------------------------------------------
##  Hierarchical Partitioning & Figures 3a 3b
#------------------------------------------------------------
source(file.path(origin,"scripts","01_analysis_functions","HierarchicalPartitioning","fn_hp_N2_wrapper.R"))
if(doRR){source(file.path(origin,"scripts","01_analysis_functions","RidgeRegression","fn_easyload_RR.R"))
nruns=nruns_RR}
if(doRF){source(file.path(origin,"scripts","01_analysis_functions","RandomForest","fn_easyload_RandomForest.R"))
nruns=nruns_RF}
if(doPLS){source(file.path(origin,"scripts","01_analysis_functions","PLS","fn_easyload_PLS.R"))
nruns=nruns_PLS}
#-------------
# load analysis Ridge Regression N2
#-------------
# define data set to be loaded
if(!doRR){
climOsoils = c("soilAclimate")
output_terms = c("")
}else{
output_terms=c(
"", # original input data
"woody","non_woody", # input data includes only woody or non-woody species
"obs", # input data not with gap-filled, but observed data
"grid", # input data not aggregated to ecoregions, but to grids
"NOsel", # input data/ Ecoregions without selection criteria
"PCA", # input traits as their first PCs from PCA
"climLat","soilLat", # climate or soil variables replaced with latitudinal information
"bias1","bias2","bias3" # traits randomized across the X0 (individual plants) level, then aggregated to ecoregions
)
climOsoils=c("soilAclimate",
"noiseAclimate","soilAnoise",
# for the single trait runs (figure S3 - figure S20):
"soil_chemistryAsoil_physics",
"climate_waterAclimate_energy"
)
}
output_term="non_woody"
r2_l <- list()
hp_l <- list()
counter=0
print("---")
print(climOsoil)
print(output_term)
counter=1+counter
r2_l[[counter]] <- load_analysis(origin,nruns,climOsoil,output_term,doPCA)
climOsoil
output_term
doPCA
nruns
origin
climOsoil
#------------------------------------------------------------------------------------
# 2. hierarchical partitioning analyses
# input folder:  data/_results/(model type)/(selected variables)/nruns/
# output folder: data/_results/(model type)/_(model type)_results
#------------------------------------------------------------------------------------
output_term = "non_woody" # defines with which subset the analysis will be done  (total)
print(output_term)
nruns_RR = 50 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
nruns_LM = 50 # number of model building repetitions for linear models, final version = 50, for quick version nruns=2
nruns_RF = 2 # number of model building repetitions for random forest, 2
nruns_PLS = 10 # number of model building repetitions for linear models, final version = 10, for quick version nruns=2
doPCA = TRUE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = TRUE # define if ridge regression analysis to be done
doPLS = TRUE # define if PLS analysis to be done
doRF  = TRUE # define if random forest analysis to be done
doLM  = FALSE# define if linear model analysis to be done
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
load(file = file.path(origin,"data","master_matrix",paste0("X2",output_term,".RData")))
info=TRY_Env$info
trait=TRY_Env$trait
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
if(output_term=="climLat"){soil = latitude}
if(output_term=="soilLat"){climate = latitude}
noise = TRY_Env$noise
climate_energy = TRY_Env$climate_energy
climate_water = TRY_Env$climate_water
soil_physics=TRY_Env$soil_physics
soil_chemistry=TRY_Env$soil_chemistry
head(trait)
print("do Ridge Regression")
nruns = nruns_RR # number of repetitions for ridge regression
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10 # number of folds for cross validation
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
#define
if(output_term==""){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the noise run (supplementary):
"noise","noiseAclimate","soilAnoise",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")}
if(output_term!=""){
climOsoils=c("climate","soil","soilAclimate")
if(output_term=="PCA"){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")
}
}
ncomp_PCA=20
if(output_term=="obs"){
source(file.path(origin,"scripts","01_analysis_functions","RidgeRegression","fn_RidgeRegression_obs.R"))}
if(output_term!="obs"){
source(file.path(origin,"scripts","01_analysis_functions","RidgeRegression","fn_RidgeRegression.R"))}
try(colSums(!is.na(trait)))
climOsoil="soil_physics"
climOsoil="soilAclimate"
print(climOsoil)
result_ridge <- analysis_RidgeRegression(climate,soil,trait,
noise,
climate_energy,climate_water,
soil_chemistry,soil_physics,
origin,Appr_type_now,climOsoil,
nruns,output_term,chunk_list,ncomp_PCA,folds,doPCA)
r2_l <- list()
hp_l <- list()
counter=0
print("---")
print(climOsoil)
print(output_term)
if((output_term==""&climOsoil%in%c("soilAclimate","soilAnoise","noiseAclimate","soil_chemistryAsoil_physics","climate_waterAclimate_energy"))|
(output_term=="woody"&climOsoil%in%c("soilAclimate"))|(
output_term=="NOsel"&climOsoil%in%c("soilAclimate"))|(
output_term=="obs"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias1"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias2"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias3"&climOsoil%in%c("soilAclimate"))|(
output_term=="biome"&climOsoil%in%c("soilAclimate"))|(
output_term=="grid"&climOsoil%in%c("soilAclimate"))|(
output_term=="PCA"&climOsoil%in%c("soilAclimate","soil_chemistryAsoil_physics","climate_waterAclimate_energy"))|(
output_term=="climLat"&climOsoil%in%c("soilAclimate"))|(
output_term=="soilLat"&climOsoil%in%c("soilAclimate"))|(
output_term=="non_woody"&climOsoil%in%c("soilAclimate"))){
counter=1+counter
r2_l[[counter]] <- load_analysis(origin,nruns,climOsoil,output_term,doPCA)
names(r2_l)[[counter]] <- climOsoil
if(output_term=="noPCA"){
r2_l[[counter]][[1]] <- r2_l[[counter]][[1]][,1:17]
r2_l[[counter]][[2]] <- r2_l[[counter]][[2]][,1:17]
r2_l[[counter]][[3]] <- r2_l[[counter]][[3]][,1:17]
}
hp_l[[counter]] <- hierarchical_partitioning(origin,output_term,climOsoil,out_now = r2_l[[counter]])
names(hp_l)[[counter]] <- climOsoil
}
origin
nruns
climOsoil
output_term
doPCA
# Ridge Regression
source(file.path(origin,"scripts","01_analysis_functions","RidgeRegression","fn_RidgeRegression.R"))
rigin = "/Users/jjoswig/Documents/_docs/03_projects/2021/002_Dichotomy/_script_data/20210907_Script_data/Supplement"
list.files(file.path(origin,"scripts/_master"))
# origin = # please add your local path here & comment the ones below.
# load functions
source(file.path(origin,"scripts" ,"_master","fn_functions.R"))
source(file.path(origin,"scripts" ,"_master","fn_packages.R"))# check, this does not exist.
#------------------------------------------------------------------------------------
# default: output_term = ""
# uncomment to activate woody or non-woody data set.
#------------------------------------------------------------------------------------
output_terms=c(
"", # original input data
"woody","non_woody", # input data includes only woody or non-woody species
"obs", # input data not with gap-filled, but observed data
"grid", # input data not aggregated to ecoregions, but to grids
"NOsel", # input data/ Ecoregions without selection criteria
"PCA", # input traits as their first PCs from PCA
"climLat","soilLat", # climate or soil variables replaced with latitudinal information
"bias1","bias2","bias3" # traits randomized across the X0 (individual plants) level, then aggregated to ecoregions
)#
#------------------------------------------------------------------------------------
output_term = "" # defines with which subset the analysis will be done  (latitude versus soil or climate)
list.files(file.path(origin,"data","master_matrix"))
load(file = file.path(origin,"data","master_matrix",paste0("X2",output_term,".RData")))
head(TRY_Env$trait)
print(output_term)
nruns_RR = 50 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
nruns_LM = 50 # number of model building repetitions for linear models, final version = 50, for quick version nruns=2
nruns_RF = 2 # number of model building repetitions for random forest, 2
nruns_PLS = 10 # number of model building repetitions for linear models, final version = 10, for quick version nruns=2
nruns_RR = 2 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
nruns_LM = 50 # number of model building repetitions for linear models, final version = 50, for quick version nruns=2
nruns_RF = 2 # number of model building repetitions for random forest, 2
nruns_PLS = 10 # number of model building repetitions for linear models, final version = 10, for quick version nruns=2
doPCA = TRUE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doPCA = TRUE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = TRUE # define if ridge regression analysis to be done
doPLS = FALSE # define if PLS analysis to be done
doRF  = FALSE # define if random forest analysis to be done
doLM  = FALSE# define if linear model analysis to be done
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
output_term==""|output_term=="obs"
doLM
model_analyses <- function(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS){
#install.packages("dplyr")
# ------------
# load data
# ------------
load(file = file.path(origin,"data","master_matrix",paste0("X2",output_term,".RData")))
info=TRY_Env$info
trait=TRY_Env$trait
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
if(output_term=="climLat"){soil = latitude}
if(output_term=="soilLat"){climate = latitude}
noise = TRY_Env$noise
climate_energy = TRY_Env$climate_energy
climate_water = TRY_Env$climate_water
soil_physics=TRY_Env$soil_physics
soil_chemistry=TRY_Env$soil_chemistry
head(trait)
#---------------------------------------------------------------------------------------
# ANALYSES
# LM
#----------------------------------------------------------------------------------------
if(doLM&(output_term==""|output_term=="obs")){
if(output_term==""){print("do lm for Supplementary Figure 15.")}
if(output_term=="obs"){print("do lm for Supplementary Figure 15.")}
nruns = nruns_LM # number of repetitions for linear models
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(1:nrow(trait),folds)
names(chunk_list[[i]] ) <- 1:folds
}
climOsoils=c("climate","soil","soilAclimate")#
climOsoil="soilAclimate"
for(climOsoil in climOsoils){
print(climOsoil)
result_lm <- analysis_lm(climate,soil=soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA,ncomp_PCA=20)
}
}else{
print("Outside of study range.")}
#----------------------------------------------------------------------------------------
# Ridge Regression
#----------------------------------------------------------------------------------------
if(doRR){
print("do Ridge Regression")
nruns = nruns_RR # number of repetitions for ridge regression
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10 # number of folds for cross validation
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
#define
if(output_term==""){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the noise run (supplementary):
"noise","noiseAclimate","soilAnoise",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")}
if(output_term!=""){
climOsoils=c("climate","soil","soilAclimate")
if(output_term=="PCA"){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")
}
}
ncomp_PCA=20
try(colSums(!is.na(trait)))
climOsoil="soilAclimate"
for(climOsoil in climOsoils){
print(climOsoil)
result_ridge <- analysis_RidgeRegression(climate,soil,trait,
noise,
climate_energy,climate_water,
soil_chemistry,soil_physics,
origin,Appr_type_now,climOsoil,
nruns,output_term,chunk_list,ncomp_PCA,folds,doPCA)
}
}
#---------------------------------------------------------------------------------------
# PLS
#----------------------------------------------------------------------------------------
if(doPLS & output_term==""){
print("do PLS for supplementary")
print(paste0("PCA: ",doPLS))
nruns = nruns_PLS # number of repetitions for partial least squares (PLS)
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
require(foreach)
require(doParallel)
registerDoParallel(cores = 3)
climOsoils=c("climate","soil","soilAclimate")
for(climOsoil in climOsoils){
print(climOsoil)
result_pls <- analysis_pls(climate,soil,trait,
origin,climOsoil,folds,nruns,
output_term,chunk_list,doPCA,ncomp_PCA=20)
}
}
#----------------------------------------------------------------------------------------
# Random Forest
#----------------------------------------------------------------------------------------
if(doRF & output_term==""& !doPCA){
nruns = nruns_RF # number of repetitions for random forest
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
climOsoils=c("climate","soil","soilAclimate")
for(climOsoil in climOsoils){
print(climOsoil)
result_rf <- analysis_RandomForest(climate,soil,trait,origin,
climOsoil,nruns,folds,output_term,chunk_list = chunk_list,ncomp_PCA=20)
}
}
}
output_term="non_woody"
for(output_term in output_terms){
r2_l <- list()
hp_l <- list()
counter=0
for(climOsoil in climOsoils){
print("---")
print(climOsoil)
print(output_term)
if((output_term==""&climOsoil%in%c("soilAclimate","soilAnoise","noiseAclimate","soil_chemistryAsoil_physics","climate_waterAclimate_energy"))|
(output_term=="woody"&climOsoil%in%c("soilAclimate"))|(
output_term=="NOsel"&climOsoil%in%c("soilAclimate"))|(
output_term=="obs"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias1"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias2"&climOsoil%in%c("soilAclimate"))|(
output_term=="bias3"&climOsoil%in%c("soilAclimate"))|(
output_term=="biome"&climOsoil%in%c("soilAclimate"))|(
output_term=="grid"&climOsoil%in%c("soilAclimate"))|(
output_term=="PCA"&climOsoil%in%c("soilAclimate","soil_chemistryAsoil_physics","climate_waterAclimate_energy"))|(
output_term=="climLat"&climOsoil%in%c("soilAclimate"))|(
output_term=="soilLat"&climOsoil%in%c("soilAclimate"))|(
output_term=="non_woody"&climOsoil%in%c("soilAclimate"))){
counter=1+counter
r2_l[[counter]] <- load_analysis(origin,nruns,climOsoil,output_term,doPCA)
names(r2_l)[[counter]] <- climOsoil
if(output_term=="noPCA"){
r2_l[[counter]][[1]] <- r2_l[[counter]][[1]][,1:17]
r2_l[[counter]][[2]] <- r2_l[[counter]][[2]][,1:17]
r2_l[[counter]][[3]] <- r2_l[[counter]][[3]][,1:17]
}
hp_l[[counter]] <- hierarchical_partitioning(origin,output_term,climOsoil,out_now = r2_l[[counter]])
names(hp_l)[[counter]] <- climOsoil
}
}
#-------------
# save
#-------------
if(doRR){
if(!file.exists(file.path(origin, "data", "_results","RidgeRegression","_RidgeRegression_results"))){
dir.create(file.path(origin, "data", "_results","RidgeRegression","_RidgeRegression_results"))}
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
save(hp_l,file=file.path(origin, "data", "_results","RidgeRegression","_RidgeRegression_results",
paste0("HP_",nruns,"nruns_",output_term,pca_term,".RData")))
save(r2_l,file=file.path(origin, "data", "_results","RidgeRegression","_RidgeRegression_results",
paste0("R2_",nruns,"nruns_",output_term,pca_term,".RData")))
}
if(doPLS){
if(doPCA){pca_term="doPCA"}
if(!doPCA){pca_term="no_PCA"}
if(!file.exists(file.path(origin, "data", "_results","PLS","_PLS_results"))){
dir.create(file.path(origin, "data", "_results","PLS","_PLS_results"))}
save(hp_l,file=file.path(origin, "data", "_results","PLS","_PLS_results",paste0("HP_",nruns,"nruns_",output_term, pca_term,".RData")))
save(r2_l,file=file.path(origin, "data", "_results","PLS","_PLS_results",paste0("R2_",nruns,"nruns_",output_term,pca_term,".RData")))
}
if(doRF){
if(!file.exists(file.path(origin, "data", "_results","RandomForest","_RandomForest_results"))){
dir.create(file.path(origin, "data", "_results","RandomForest","_RandomForest_results"))}
save(hp_l,file=file.path(origin, "data", "_results","RandomForest","_RandomForest_results",paste0("HP_",nruns,"nruns_",output_term,".RData")))
save(r2_l,file=file.path(origin, "data", "_results","RandomForest","_RandomForest_results",paste0("R2_",nruns,"nruns_",output_term,".RData")))
}
}
output_term="non_woody"
doPCA = TRUE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = TRUE # define if ridge regression analysis to be done
doPLS = FALSE # define if PLS analysis to be done
doRF  = FALSE # define if random forest analysis to be done
doLM  = FALSE# define if linear model analysis to be done
print(output_term)
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
output_term
climOsoils
climOsoil
print("do Ridge Regression")
nruns = nruns_RR # number of repetitions for ridge regression
# creating random chunks of rows that enter the 10-fold cross validation
# per repetition one
folds=10 # number of folds for cross validation
chunk <- function(x,n) split(x, factor(sort(rank(x)%%n)))
chunk_list <- list()
for(i in 1:nruns){
chunk_list[[i]] <- chunk(sample(1:nrow(trait)),folds)
}
#define
if(output_term==""){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the noise run (supplementary):
"noise","noiseAclimate","soilAnoise",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")}
if(output_term!=""){
climOsoils=c("climate","soil","soilAclimate")
if(output_term=="PCA"){
climOsoils=c(
# for the original run
"soil","climate","soilAclimate",
# for the single trait runs (figure S4n):
"soil_physics","soil_chemistry",
"climate_water","climate_energy")
}
}
ncomp_PCA=20
try(colSums(!is.na(trait)))
climOsoil="soilAclimate"
for(climOsoil in climOsoils){
print(climOsoil)
result_ridge <- analysis_RidgeRegression(climate,soil,trait,
noise,
climate_energy,climate_water,
soil_chemistry,soil_physics,
origin,Appr_type_now,climOsoil,
nruns,output_term,chunk_list,ncomp_PCA,folds,doPCA)
}
nruns_RR = 50 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
nruns_LM = 50 # number of model building repetitions for linear models, final version = 50, for quick version nruns=2
nruns_RF = 2 # number of model building repetitions for random forest, 2
nruns_PLS = 10 # number of model building repetitions for linear models, final version = 10, for quick version nruns=2
doPCA = TRUE # define if PCA prior to RR/PLS is to be done analysis to be done (never RF)
doRR  = TRUE # define if ridge regression analysis to be done
doPLS = FALSE # define if PLS analysis to be done
doRF  = FALSE # define if random forest analysis to be done
doLM  = FALSE# define if linear model analysis to be done
model_analyses(origin, output_term, doPCA,
doRR,    doLM,    doRF,    doPLS,
nruns_RR,nruns_LM,nruns_RF,nruns_PLS)
