dat_xy=mod$CCA$v[,1:2]
dat_xy_text <- dat_xy*1.7
dat_xy_arrows <- dat_xy*1.5
rownames(mod$CCA$v)
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),1] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),1]+.1
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),2]+.06
dat_xy_text[which(rownames(dat_xy_text)=="Seed.mass"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.mass"),2]-.08
dat_xy_text[which(rownames(dat_xy_text)=="Dispersal.U.length"),1] <-dat_xy_text[which(rownames(dat_xy)=="Dispersal.U.length"),1]+.37
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),2] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),2]-0.05
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),1] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),1]-0.1
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),2] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),2]+0.05
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),1] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),1]-0.25
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= "darkgray",length = .1,lwd = 1.2)
}
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= color_to_traits(colnames(trait))[t],length = .1,lwd = 1)
}
textplot(dat_xy_text[,1],dat_xy_text[,2],
col=color_to_traits(colnames(trait)),
cex=1.4,
words = trait_names, new = F)
#----------------------------------------------------------------------------------
# plot 2
#----------------------------------------------------------------------------------
par(mar=c(5,5,0,0))
plot(1:10, type="n",xlim=c(minx,maxx),ylim=c(miny,maxy),frame=FALSE,
xlab="RDA1",
ylab="RDA2",
cex.lab=1.2,
cex.axis=1)
points(mod$CCA$wa[,1:2]*2,col=add.alpha(color_to_biomes(info$BIOME),.7),pch=16,cex=1.5)
for(v in 1:nrow(mod$CCA$biplot)){
arrows(x0 = 0, y0 = 0, x1 = mod$CCA$biplot[v,1], y1 = mod$CCA$biplot[v,2],
col= add.alpha(color_to_ClimateSoil(Rename_Vars(colnames(explanatory_o))[,2])[v],.5),length = .1,lwd = 1)
}
dat_xy <- mod$CCA$biplot[,1:2]
dat_xy[rownames(dat_xy)=="Vapour.pressure_min",] <-  dat_xy[rownames(dat_xy)=="Vapour.pressure_min",]+c(-.16,-.01)
dat_xy[dat_xy<0] <- dat_xy[dat_xy<0]-.03
dat_xy[dat_xy>0] <- dat_xy[dat_xy>0]+.03
textplot(dat_xy[,1],dat_xy[,2],
col= color_to_ClimateSoil(Rename_Vars(colnames(explanatory_o))[,2]),
cex=1.2,lwd=1,words= rownames(mod$CCA$biplot),
new = FALSE)
#----------------------------------------------------------------------------------
# plot 3
#----------------------------------------------------------------------------------
par(mar=c(0,0,0,0))
BiomN=c(14,1,2,7,3,12,13)
plot(1:10, type="n",xlim=c(0,1),ylim=c(0,1),xlab="",ylab="",xaxt="n",yaxt="n",frame=FALSE,col="white")
legend("topright", name_to_biomes(BiomN), col = color_to_biomes(BiomN),cex=.925,pt.cex=2,
text.col = "black", pch = 16,box.col = "white")
#----------------------------------------------------------------------------------
# plot 4
#----------------------------------------------------------------------------------
par(mar=c(0,0,0,0))
BiomN=c(5,4,8,6,10,11)
plot(1:10, type="n",xlim=c(0,1),ylim=c(0,1),xlab="",ylab="",xaxt="n",yaxt="n",frame=FALSE,col="white")
legend("topright", name_to_biomes(BiomN), col = color_to_biomes(BiomN),cex=.925,pt.cex=2,
text.col = "black", pch = 16,box.col = "white")
dev.off()
}
#  plot(abs(info$Lat),mod$CCA$wa[,1],pch=16,col=color_to_biomes(info$BIOME))
#  plot(mod$CCA$wa[,1],abs(info$Lat),pch=16,col=color_to_biomes(info$BIOME))
#  plot(info$Lat,mod$CCA$wa[,2],pch=16,col=color_to_biomes(info$BIOME))
#  abline(0,0)
#  abline(0.05,0)
#  plot(soil$SNDPPT_M_sl1_1km_ll.tif,mod$CCA$wa[,2],pch=16,col=color_to_biomes(info$BIOME))
#  plot(climate$PrecipitationofWettestMonth.nc,mod$CCA$wa[,2],pch=16,col=color_to_biomes(info$BIOME))
#
#  plot(soil$SNDPPT_M_sl1_1km_ll.tif,
#       log(climate$PrecipitationofWettestMonth.nc),pch=16,col=color_to_biomes(info$BIOME))
}
#        text(x=-0.1,y=-.6,"Temperate",cex=2,col=color_to_biomes(4),srt=11)#out$er.NB3$Biome
plot_Figure_4(origin)
par(mfrow=c(3,1),mar=c(5,5,0,0))
layout.matrix <- matrix(c(1,2,3,1,2, 4), nrow = 3, ncol = c(2))
layout(mat = layout.matrix,
heights = c(1, 1,.25), # Heights of the two rows
widths = c(.5,.5)) # Widths of the two columns
#----------------------------------------------------------------------------------
# plot 1
#----------------------------------------------------------------------------------
par(mar=c(5,5,0,0))
trait_names <- Rename_Vars(colnames(trait))[,3]
minx=-1
maxx=1.1
miny=minx
maxy=maxx
plot(1:10, type="n",xlim=c(minx,maxx),ylim=c(miny,maxy),frame=FALSE,
xlab="RDA1",
ylab="RDA2",
cex.lab=1.2,
cex.axis=1)
points(mod$CCA$wa[,1:2]*2,col=add.alpha(color_to_biomes(info$BIOME),.7),pch=16,cex=1.5)
dat_xy=mod$CCA$v[,1:2]
dat_xy_text <- dat_xy*1.7
dat_xy_arrows <- dat_xy*1.5
rownames(mod$CCA$v)
# packages
require(ggrepel)
require(wordcloud)
require(tm)
require(mvtnorm)
require(FactoMineR)
try(detach(package:calibrate,unload = T))
try(detach(package:rda))
require(vegan)
require(textplot)
#---------------------------------------------------------------------------------------
# load data
#---------------------------------------------------------------------------------------
load(file = file.path(origin,"data","master_matrix",paste0("X2.RData")))
info=TRY_Env$info
trait=TRY_Env$trait
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
color_to_ClimateSoil<- function(vector_now){
colors_now <-c(soil_col, climate_col)
out <- rep("white",length(vector_now))
out[grep(x = vector_now,pattern = "soil")] <- colors_now[1]
out[Rename_Vars(vector_now)[,2]=="soil"]<- colors_now[2]
out[grep(x = vector_now,pattern = "climate")] <- colors_now[2]
out[Rename_Vars(vector_now)[,2]=="climate"]<- colors_now[2]
return(out)
}
# keep only topsoil layer
soil_c <- soil[,-c(grep(names(soil) ,pattern = "_sl2"),
grep(names(soil) ,pattern = "_sl3"),
grep(names(soil) ,pattern = "_sl4"),
grep(names(soil) ,pattern = "_sl5"),
grep(names(soil) ,pattern = "_sl6"),
grep(names(soil) ,pattern = "_sl7"),
grep(names(soil) ,pattern = "_sd2"),
grep(names(soil) ,pattern = "_sd3"),
grep(names(soil) ,pattern = "_sd4"),
grep(names(soil) ,pattern = "_sd5"),
grep(names(soil) ,pattern = "_sd6"),
grep(names(soil) ,pattern = "_sd7"))]
print(paste("Keeping",Rename_Vars(colnames(soil_c))[,3]))
#--------------------------------------
# check length of the axes (?)
#decorana(as.matrix(cbind(soil,climate))+abs(min(as.matrix(cbind(soil,climate)))))
# all axes below 2 standard deviations -> RDA appropriate
#decorana(trait)
# all axes below 2 standard deviations -> RDA appropriate
# scale the predictors
explanatory_o <- scale(cbind(soil_c,climate))
explanatory <- explanatory_o# keep _o with unchanged names
colnames(explanatory) <- Rename_Vars(colnames(explanatory))[,3]
# log-scale the traits
response_o <- as.matrix(scale(log(trait)))
response = response_o# keep _o with unchanged names
colnames(response) <- Rename_Vars(colnames(response_o))[,3]
e <- data.frame(explanatory) # [,which(colnames(explanatory)%in%ix_imp)]
r <- data.frame(response)
dat_rda <- cbind(e,r)
# rda
m1 <- rda((r+abs(min(r))) ~ ., e)
m0 <- rda((r+abs(min(r))) ~ 1, e)
m= m1
par(mfrow=c(1,1))
# check: ordiplot(m)
mod=m
print(RsquareAdj(mod)) # how much can be explained totally
#---
# significance test:
anova(m)
sum_eigenvalues = sum(mod$CCA$eig)
sum(mod$CCA$eig) == mod$CCA$tot.chi
Var_explained <- as.numeric(mod$CCA$eig/sum(mod$CCA$eig)[[1]])
barplot(Var_explained*RsquareAdj(mod)$adj.r.squared)
barplot(mod$CCA$eig/sum(mod$CCA$eig))
constrained_eig <- mod$CCA$eig/mod$CA$tot.chi*100
unconstrained_eig <- mod$CA$eig/mod$CA$tot.chi*100
summary(mod)
constrained_eig
barplot (c(constrained_eig, unconstrained_eig),
col = c(rep ('red', length (constrained_eig)), rep ('black', length (unconstrained_eig))),
las = 2, ylab = '% variation')
# fit the ecoregion in the same number of axes
# fit - > put number of axes
#rownames(mod$CCA$biplot) <- substr(rownames(mod$CCA$biplot) , start=2,stop=nchar(rownames(mod$CCA$biplot)))
df_now <- cbind(rownames(mod$CCA$biplot),mod$CCA$biplot[,1]*4,mod$CCA$biplot[,2]*4)
rownames(df_now) <-  1:nrow(df_now)
colnames(df_now) <- c("names","one","two")
df_now <- as.data.frame(df_now)
try(dev.off())
if(!dir.exists(file.path(origin,"figures","figure_4"))){
dir.create(file.path(origin,"figures","figure_4"))}
{
# Set plot layout
par(mfrow=c(3,1),mar=c(5,5,0,0))
layout.matrix <- matrix(c(1,2,3,1,2, 4), nrow = 3, ncol = c(2))
layout(mat = layout.matrix,
heights = c(1, 1,.25), # Heights of the two rows
widths = c(.5,.5)) # Widths of the two columns
#----------------------------------------------------------------------------------
# plot 1
#----------------------------------------------------------------------------------
par(mar=c(5,5,0,0))
trait_names <- Rename_Vars(colnames(trait))[,3]
minx=-1
maxx=1.1
miny=minx
maxy=maxx
plot(1:10, type="n",xlim=c(minx,maxx),ylim=c(miny,maxy),frame=FALSE,
xlab="RDA1",
ylab="RDA2",
cex.lab=1.2,
cex.axis=1)
points(mod$CCA$wa[,1:2]*2,col=add.alpha(color_to_biomes(info$BIOME),.7),pch=16,cex=1.5)
dat_xy=mod$CCA$v[,1:2]
dat_xy_text <- dat_xy*1.7
dat_xy_arrows <- dat_xy*1.5
rownames(mod$CCA$v)
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),1] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),1]+.1
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),2]+.06
dat_xy_text[which(rownames(dat_xy_text)=="Seed.mass"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.mass"),2]-.08
dat_xy_text[which(rownames(dat_xy_text)=="Dispersal.U.length"),1] <-dat_xy_text[which(rownames(dat_xy)=="Dispersal.U.length"),1]+.37
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),2] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),2]-0.05
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),1] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),1]-0.1
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),2] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),2]+0.05
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),1] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),1]-0.25
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= "darkgray",length = .1,lwd = 1.2)
}
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= color_to_traits(colnames(trait))[t],length = .1,lwd = 1)
}
textplot(dat_xy_text[,1],dat_xy_text[,2],
col=color_to_traits(colnames(trait)),
cex=1.4,
words = trait_names, new = F)
)
}
}
try(dev.off())
try(dev.off())
try(dev.off())
try(dev.off())
try(dev.off())
par(mfrow=c(3,1),mar=c(5,5,0,0))
layout.matrix <- matrix(c(1,2,3,1,2, 4), nrow = 3, ncol = c(2))
layout(mat = layout.matrix,
heights = c(1, 1,.25), # Heights of the two rows
widths = c(.5,.5)) # Widths of the two columns
#----------------------------------------------------------------------------------
# plot 1
#----------------------------------------------------------------------------------
par(mar=c(5,5,0,0))
trait_names <- Rename_Vars(colnames(trait))[,3]
minx=-1
maxx=1.1
miny=minx
maxy=maxx
plot(1:10, type="n",xlim=c(minx,maxx),ylim=c(miny,maxy),frame=FALSE,
xlab="RDA1",
ylab="RDA2",
cex.lab=1.2,
cex.axis=1)
points(mod$CCA$wa[,1:2]*2,col=add.alpha(color_to_biomes(info$BIOME),.7),pch=16,cex=1.5)
dat_xy=mod$CCA$v[,1:2]
dat_xy_text <- dat_xy*1.7
dat_xy_arrows <- dat_xy*1.5
rownames(mod$CCA$v)
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),1] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),1]+.1
dat_xy_text[which(rownames(dat_xy_text)=="Seed.length"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.length"),2]+.06
dat_xy_text[which(rownames(dat_xy_text)=="Seed.mass"),2] <- dat_xy_text[which(rownames(dat_xy)=="Seed.mass"),2]-.08
dat_xy_text[which(rownames(dat_xy_text)=="Dispersal.U.length"),1] <-dat_xy_text[which(rownames(dat_xy)=="Dispersal.U.length"),1]+.37
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),2] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),2]-0.05
dat_xy_text[which(rownames(dat_xy_text)=="Conduit.density"),1] <-dat_xy_text[which(rownames(dat_xy)=="Conduit.density"),1]-0.1
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),2] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),2]+0.05
dat_xy_text[which(rownames(dat_xy_text)=="Seeds.per.Reprod.U"),1] <-dat_xy_text[which(rownames(dat_xy)=="Seeds.per.Reprod.U"),1]-0.25
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= "darkgray",length = .1,lwd = 1.2)
}
for(t in 1:17){
arrows(x0 = 0, y0 = 0, x1 = dat_xy_arrows[t,1], y1 = dat_xy_arrows[t,2],col= color_to_traits(colnames(trait))[t],length = .1,lwd = 1)
}
textplot(dat_xy_text[,1],dat_xy_text[,2],
col=color_to_traits(colnames(trait)),
cex=1.4,
words = trait_names, new = F)
require(textplot)
# ---------------------------------------------------------------------------------------
# 00 - define the origin path
# ---------------------------------------------------------------------------------------
origin = getwd() # please add your local path here
# load functions from functions scripts
source(file.path(origin,"scripts" ,"_support_functions","fn_functions.R"))
# Errors: load table_1.R no working
source(file.path(origin,"scripts" ,"_support_functions","fn_packages.R"))# check, this does not exist.
# [1.] Ridge Regression - model building
# input folder: data/master_matrix
# output folder: data/_results (output files for nruns=50 already available)
#------------------------------------------------------------------------------------
nruns = 50 # number of model building repetitions for ridge regression final version = 50, for quick version nruns=2
doPCA = TRUE # define if hierarchichal paritioning for PCA prior to RR or PLS is to be done analysis to be done
# packages
require(ggrepel)
require(wordcloud)
require(tm)
require(mvtnorm)
require(FactoMineR)
try(detach(package:calibrate,unload = T))
try(detach(package:rda,unload = T))
require(vegan)
require(textplot)
#---------------------------------------------------------------------------------------
# load data
#---------------------------------------------------------------------------------------
load(file = file.path(origin,"data","master_matrix",paste0("X2.RData")))
info=TRY_Env$info
trait=TRY_Env$trait
soil = TRY_Env$soil
climate = TRY_Env$climate
latitude = abs(cbind(TRY_Env$info$Lat,TRY_Env$info$max.lat,TRY_Env$info$min.lat))
color_to_ClimateSoil<- function(vector_now){
colors_now <-c(soil_col, climate_col)
out <- rep("white",length(vector_now))
out[grep(x = vector_now,pattern = "soil")] <- colors_now[1]
out[Rename_Vars(vector_now)[,2]=="soil"]<- colors_now[2]
out[grep(x = vector_now,pattern = "climate")] <- colors_now[2]
out[Rename_Vars(vector_now)[,2]=="climate"]<- colors_now[2]
return(out)
}
# keep only topsoil layer
soil_c <- soil[,-c(grep(names(soil) ,pattern = "_sl2"),
grep(names(soil) ,pattern = "_sl3"),
grep(names(soil) ,pattern = "_sl4"),
grep(names(soil) ,pattern = "_sl5"),
grep(names(soil) ,pattern = "_sl6"),
grep(names(soil) ,pattern = "_sl7"),
grep(names(soil) ,pattern = "_sd2"),
grep(names(soil) ,pattern = "_sd3"),
grep(names(soil) ,pattern = "_sd4"),
grep(names(soil) ,pattern = "_sd5"),
grep(names(soil) ,pattern = "_sd6"),
grep(names(soil) ,pattern = "_sd7"))]
print(paste("Keeping",Rename_Vars(colnames(soil_c))[,3]))
#--------------------------------------
# check length of the axes (?)
#decorana(as.matrix(cbind(soil,climate))+abs(min(as.matrix(cbind(soil,climate)))))
# all axes below 2 standard deviations -> RDA appropriate
#decorana(trait)
# all axes below 2 standard deviations -> RDA appropriate
# scale the predictors
explanatory_o <- scale(cbind(soil_c,climate))
explanatory <- explanatory_o# keep _o with unchanged names
colnames(explanatory) <- Rename_Vars(colnames(explanatory))[,3]
# log-scale the traits
response_o <- as.matrix(scale(log(trait)))
response = response_o# keep _o with unchanged names
colnames(response) <- Rename_Vars(colnames(response_o))[,3]
e <- data.frame(explanatory) # [,which(colnames(explanatory)%in%ix_imp)]
r <- data.frame(response)
dat_rda <- cbind(e,r)
# rda
m1 <- rda((r+abs(min(r))) ~ ., e)
m0 <- rda((r+abs(min(r))) ~ 1, e)
m= m1
par(mfrow=c(1,1))
m= m1
par(mfrow=c(1,1))
# check: ordiplot(m)
mod=m
print(RsquareAdj(mod)) # how much can be explained totally
#---
# significance test:
anova(m)
sum_eigenvalues = sum(mod$CCA$eig)
sum(mod$CCA$eig) == mod$CCA$tot.chi
Var_explained <- as.numeric(mod$CCA$eig/sum(mod$CCA$eig)[[1]])
barplot(Var_explained*RsquareAdj(mod)$adj.r.squared)
barplot(mod$CCA$eig/sum(mod$CCA$eig))
constrained_eig <- mod$CCA$eig/mod$CA$tot.chi*100
unconstrained_eig <- mod$CA$eig/mod$CA$tot.chi*100
summary(mod)
constrained_eig
barplot (c(constrained_eig, unconstrained_eig),
col = c(rep ('red', length (constrained_eig)), rep ('black', length (unconstrained_eig))),
las = 2, ylab = '% variation')
df_now <- cbind(rownames(mod$CCA$biplot),mod$CCA$biplot[,1]*4,mod$CCA$biplot[,2]*4)
rownames(df_now) <-  1:nrow(df_now)
colnames(df_now) <- c("names","one","two")
df_now <- as.data.frame(df_now)
library(raster)
library(sp)
library(SpatialEpi)
library(rgdal)
library(ncdf4)
# -------------------------------------------------------------
# load data X1
# -------------------------------------------------------------
load(file = file.path(origin,"data/master_matrix","X1.RData"))
traits <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="trait"]
#  soil <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="soil"]
#  climate <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="climate"]
info_2 <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
rm("TRY_Env_o")
rm("TRY_Env")
load(file = file.path(origin,"data/master_matrix","X0.RData"))
TRY_Env_o <- TRY_Env
Appr_type_now="Data_GapFilled"
# -------------------------------------------------------------
# prep data:
# -------------------------------------------------------------
info_obs <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
rm("TRY_Env")
coord1 <- cbind(info_obs$Lat,info_obs$Lon)
head(coord1)
coord <- unique(coord1)
coord
#-----------------------------
# load selected ecoregion
#-----------------------------
# get the Ecoregions of interest:
selected_ER <- as.data.frame(cbind(info_2$ECO_ID,info_2$species.count))
colnames(selected_ER) <- c("ID","nb_traits")
colnames(selected_ER)
info_2$ECO_ID
#  soil <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="soil"]
#  climate <- TRY_Env[Rename_Vars(names(TRY_Env))[,2]=="climate"]
info_2 <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
# -------------------------------------------------------------
# load data X1
# -------------------------------------------------------------
load(file = file.path(origin,"data/master_matrix","X1.RData"))
info_2 <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
# -------------------------------------------------------------
# split into traits and environment
# -------------------------------------------------------------
TRY_Env <- TRY_Env1
info_2 <- cbind(TRY_Env[names(TRY_Env)=="Kier_richness"|
names(TRY_Env)=="ECO_ID"|
names(TRY_Env)=="ECO_NAME"|
names(TRY_Env)=="BIOME"|
names(TRY_Env)=="species.count"|
names(TRY_Env)=="observation.count.tot"|
names(TRY_Env)=="Lat"|
names(TRY_Env)=="Lon"|
names(TRY_Env)=="min.lat"|
names(TRY_Env)=="max.lat"|
names(TRY_Env)=="min.lon"|
names(TRY_Env)=="max.lon"|
names(TRY_Env)=="Kier_area"],
TRY_Env[grep(names(TRY_Env),pattern = "observation.count.")]
)
rm("TRY_Env")
rm("TRY_Env1")
list.files(file.path(origin,"data/master_matrix","_aggregated_agg0","TRY","NA_mnNbr"))
load(file = file.path(origin,"data/master_matrix","X0.RData"))
list.files(file.path(origin,"data/master_matrix"))
load(file = file.path(origin,"data/master_matrix","X0.RData"))
